*What You Should Already Know?
    HTML
    CSS
    JavaScript
*What is PHP?
    PHP is an acronym for "PHP: Hypertext Preprocessor"
    PHP is a widely-used, open source scripting language
    PHP scripts are executed on the server
    PHP is free to download and use
    PHP is a server scripting language, and a powerful tool for making dynamic and interactive Web pages.
    PHP is a widely-used, free, and efficient alternative to competitors such as Microsoft's ASP. 
*PHP is an amazing and popular language!
    It is powerful enough to be at the core of the biggest blogging system on the web (WordPress)!
    It is deep enough to run large social networks!
    It is also easy enough to be a beginner's first server side language!
*What is a PHP File?
    PHP files can contain text, HTML, CSS, JavaScript, and PHP code
    PHP code is executed on the server, and the result is returned to the browser as plain HTML
    PHP files have extension ".php"
*What Can PHP Do?
    PHP can generate dynamic page content
    PHP can create, open, read, write, delete, and close files on the server
    PHP can collect form data
    PHP can send and receive cookies
    PHP can add, delete, modify data in your database
    PHP can be used to control user-access
    PHP can encrypt data
*Why PHP?
    PHP runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
    PHP is compatible with almost all servers used today (Apache, IIS, etc.)
    PHP supports a wide range of databases
    PHP is free. Download it from the official PHP resource: www.php.net
    PHP is easy to learn and runs efficiently on the server side
*
    The default file extension for PHP files is ".php".
    start tag:  
        end tag:
        <?php ?>
    PHP statements end with a semicolon (;).
    PHP Case Sensitivity
        1-(if, else, while, echo), classes, functions, and user-defined functions are not case-sensitive.
        2-However; all variable names are case-sensitive!
*Comments in PHP
    Comments can be used to:
    Let others understand your code
    Remind yourself of what you did - Most programmers have experienced coming back to their own work a year or two later and having to re-figure out what they did. Comments can remind you of what you were thinking when you wrote the code
*variable
    Think of variables as containers for storing data.
    Rules for PHP variables:
        A variable starts with the $ sign, followed by the name of the variable
        A variable name must start with a letter or the underscore character
        A variable name cannot start with a number
        A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )
        Variable names are case-sensitive ($age and $AGE are two different variables)
    PHP is a Loosely Typed Language
        PHP automatically associates a data type to the variable, depending on its value.
    PHP Variables Scope
        PHP has three different variable scopes:
            local
            global
            static
        A variable declared outside a function has a GLOBAL SCOPE and can only be accessed outside a function
        A variable declared within a function has a LOCAL SCOPE and can only be accessed within that function:
*echo is marginally faster than print
*PHP Data Types
Variables can store data of different types, and different data types can do different things.
PHP supports the following data types:
    String
    Integer
    Float (floating point numbers - also called double)
    Boolean
    Array
    Object
    NULL
    Resource
*string function
    1-The PHP strlen() function returns the length of a string.
    2-The PHP str_word_count() function counts the number of words in a string.
    3-The PHP strrev() function reverses a string.
    4-The PHP strpos() function searches for a specific text within a string. If a match is found, the function returns the character position of the first match. If no match is found, it will return FALSE.
    5-The PHP str_replace() function replaces some characters with some other characters in a string.
*PHP Integers
    2, 256, -256, 10358, -179567 are all integers.
    An integer is a number without any decimal part.
    An integer data type is a non-decimal number between -2147483648 and 2147483647 in 32 bit systems, and between -9223372036854775808 and 9223372036854775807 in 64 bit systems. A value greater (or lower) than this, will be stored as float, because it exceeds the limit of an integer.
    Note: Another important thing to know is that even if 4 * 2.5 is 10, the result is stored as float, because one of the operands is a float (2.5).
    Here are some rules for integers:
        An integer must have at least one digit
        An integer must NOT have a decimal point
        An integer can be either positive or negative
        Integers can be specified in three formats: decimal (10-based), hexadecimal (16-based - prefixed with 0x) or octal (8-based - prefixed with 0)
        PHP Infinity
    A numeric value that is larger than PHP_FLOAT_MAX is considered infinite.
        PHP has the following functions to check if a numeric value is finite or infinite:
        is_finite()
        is_infinite()
    PHP NaN
        NaN stands for Not a Number.
        NaN is used for impossible mathematical operations.
        PHP has the following functions to check if a value is not a number:
        is_nan()
*PHP Constants
    A constant is an identifier (name) for a simple value. The value cannot be changed during the script.
    A valid constant name starts with a letter or underscore (no $ sign before the constant name).
    Note: Unlike variables, constants are automatically global across the entire script.
    define(name, value, case-insensitive)
*PHP Operators
    Operators are used to perform operations on variables and values.
    PHP divides the operators in the following groups:
        Arithmetic operators
        Assignment operators
        Comparison operators
        Increment/Decrement operators
        Logical operators
        String operators
        Array operators
        Conditional assignment operators
*PHP Conditional Statements
    Very often when you write code, you want to perform different actions for different conditions. You can use conditional statements in your code to do this.
    In PHP we have the following conditional statements:
    if statement - executes some code if one condition is true
    if...else statement - executes some code if a condition is true and another code if that condition is false
    if...elseif...else statement - executes different codes for more than two conditions
    switch statement - selects one of many blocks of code to be executed
*PHP Loops
    Often when you write code, you want the same block of code to run over and over again a certain number of times. So, instead of adding several almost equal code-lines in a script, we can use loops.
    Loops are used to execute the same block of code again and again, as long as a certain condition is true.
    In PHP, we have the following loop types:
    while - loops through a block of code as long as the specified condition is true
    do...while - loops through a block of code once, and then repeats the loop as long as the specified condition is true
    for - loops through a block of code a specified number of times
    foreach - loops through a block of code for each element in an array
*The break statement can also be used to jump out of a loop.
*The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.
*What is an Array?
    An array is a special variable, which can hold more than one value at a time.
    In PHP, there are three types of arrays:
        Indexed arrays - Arrays with a numeric index
        Associative arrays - Arrays with named keys
        Multidimensional arrays - Arrays containing one or more arrays
*PHP - Sort Functions For Arrays
    In this chapter, we will go through the following PHP array sort functions:
    sort() - sort arrays in ascending order
    rsort() - sort arrays in descending order
    asort() - sort associative arrays in ascending order, according to the value
    ksort() - sort associative arrays in ascending order, according to the key
    arsort() - sort associative arrays in descending order, according to the value
    krsort() - sort associative arrays in descending order, according to the key
*PHP Global Variables - Superglobals
    Some predefined variables in PHP are "superglobals", which means that they are always accessible, regardless of scope - and you can access them from any function, class or file without having to do anything special.
    The PHP superglobal variables are:
    $GLOBALS
    $_SERVER
    $_REQUEST
    $_POST
    $_GET
    $_FILES
    $_ENV
    $_COOKIE
    $_SESSION
*$exp = "/w3schools/i";
    In the example above, / is the delimiter, w3schools is the pattern that is being searched for, and i is a modifier that makes the search case-insensitive.
    The delimiter can be any character that is not a letter, number, backslash or space. The most common delimiter is the forward slash (/), but when your pattern contains forward slashes it is convenient to choose other delimiters such as # or ~.

*Get a Date
The required format parameter of the date() function specifies how to format the date (or time).
Here are some characters that are commonly used for dates:
    d - Represents the day of the month (01 to 31)
    m - Represents a month (01 to 12)
    Y - Represents a year (in four digits)
    l (lowercase 'L') - Represents the day of the week
    Other characters, like"/", ".", or "-" can also be inserted between the characters to add additional formatting.
*Get a Time
Here are some characters that are commonly used for times:
    H - 24-hour format of an hour (00 to 23)
    h - 12-hour format of an hour with leading zeros (01 to 12)
    i - Minutes with leading zeros (00 to 59)
    s - Seconds with leading zeros (00 to 59)
    a - Lowercase Ante meridiem and Post meridiem (am or pm)
*The include and require statements are identical, except upon failure:
    require will produce a fatal error (E_COMPILE_ERROR) and stop the script
    include will only produce a warning (E_WARNING) and the script will continue